'use client';

import React, { useEffect, useState } from 'react';

const GoogleMapsTest: React.FC = () => {
  const [status, setStatus] = useState<string>('Initialisation...');
  const [apiKey, setApiKey] = useState<string>('');

  useEffect(() => {
    const testGoogleMaps = async () => {
      try {
        // V√©rifier la cl√© API
        const key = import.meta.env.VITE_GOOGLE_MAPS_API_KEY;
        setApiKey(key || 'Non d√©finie');
        
        if (!key || key === 'your_google_maps_api_key_here') {
          setStatus('‚ùå Cl√© API manquante ou non configur√©e');
          return;
        }

        setStatus('üîë Cl√© API trouv√©e, chargement de Google Maps...');
        console.log('üîë Cl√© API d√©tect√©e:', key.substring(0, 20) + '...');

        // Tester le chargement de Google Maps directement
        console.log('üì° Chargement de Google Maps...');
        await new Promise((resolve, reject) => {
          const script = document.createElement('script');
          script.src = `https://maps.googleapis.com/maps/api/js?key=${key}&libraries=places&callback=googleMapsTestCallback`;
          script.async = true;
          script.defer = true;
          
          (window as any).googleMapsTestCallback = () => {
            console.log('‚úÖ Google Maps charg√© avec succ√®s');
            resolve(true);
          };
          
          script.onerror = () => {
            console.error('‚ùå Erreur de chargement de Google Maps');
            reject(new Error('Erreur de chargement de Google Maps'));
          };
          
          document.head.appendChild(script);
        });
        
        setStatus('‚úÖ Google Maps charg√© avec succ√®s !');
        console.log('‚úÖ Google Maps charg√© avec succ√®s');
        
        // Tester l'objet google
        if (typeof window !== 'undefined' && window.google) {
          setStatus('‚úÖ Google Maps enti√®rement fonctionnel !');
          console.log('‚úÖ Objet google disponible:', !!window.google);
          console.log('‚úÖ Places API disponible:', !!window.google.maps?.places);
          
          // Tester la nouvelle API PlaceAutocompleteElement
          try {
            const testElement = document.createElement('gmp-place-autocomplete');
            console.log('‚úÖ PlaceAutocompleteElement disponible:', !!testElement);
            setStatus('‚úÖ Google Maps + PlaceAutocompleteElement fonctionnel !');
          } catch (error) {
            console.log('‚ö†Ô∏è PlaceAutocompleteElement non disponible:', error);
          }
        }
        
      } catch (error) {
        setStatus(`‚ùå Erreur: ${error}`);
        console.error('‚ùå Erreur de test Google Maps:', error);
        
        // Diagnostic d√©taill√©
        if (error instanceof Error) {
          if (error.message.includes('API key')) {
            setStatus('‚ùå Probl√®me de cl√© API - V√©rifiez Google Cloud Console');
          } else if (error.message.includes('referer')) {
            setStatus('‚ùå Probl√®me de restrictions - Ajoutez localhost:5173');
          } else {
            setStatus(`‚ùå Erreur: ${error.message}`);
          }
        }
      }
    };

    testGoogleMaps();
  }, []);

  return (
    <div className="p-4 bg-gray-100 rounded-lg">
      <h3 className="font-semibold mb-2">Test Google Maps API</h3>
      <p><strong>Cl√© API:</strong> {apiKey.substring(0, 20)}...</p>
      <p><strong>Statut:</strong> {status}</p>
      {status.includes('‚úÖ') && (
        <p className="text-green-600 mt-2">üéâ L'autocompl√©tion devrait maintenant fonctionner !</p>
      )}
    </div>
  );
};

export default GoogleMapsTest;
